/**!
 * @license Emoji-Fallback.js - A pure vanilla JavaScript library for EASILY parsing M3U / IPTV
 * VERSION: 1.0.0
 * LICENSED UNDER MIT LICENSE
 * MORE INFO CAN BE FOUND AT https://github.com/MarketingPipeline/Emoji-Fallback.js/
 */ var t={d:(r,e)=>{for(var n in e)t.o(e,n)&&!t.o(r,n)&&Object.defineProperty(r,n,{enumerable:!0,get:e[n]})},o:(t,r)=>Object.prototype.hasOwnProperty.call(t,r)},r={};function e(t){return function(t){if(Array.isArray(t))return n(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,r){if(t){if("string"==typeof t)return n(t,r);var e={}.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?n(t,r):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(t,r){(null==r||r>t.length)&&(r=t.length);for(var e=0,n=Array(r);e<r;e++)n[e]=t[e];return n}function i(t){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i(t)}function a(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,o(n.key),n)}}function o(t){var r=function(t,r){if("object"!=i(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var n=e.call(t,r||"default");if("object"!=i(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==i(r)?r:r+""}t.d(r,{t:()=>s});var s=function(){return t=function t(){!function(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t),this.deck=[],this.currentSpread=[],this.customSpreads=new Map,this.isInitialized=!1},(r=[{key:"initializeDeck",value:function(t){if(!Array.isArray(t)||0===t.length)throw new Error("Cards must be provided as a non-empty array");return t.forEach(function(t,r){if("object"!==i(t)||Array.isArray(t))throw new Error("Item at index ".concat(r," is not a valid TarotCard item. Must be a JSON object."))}),this.deck=t,this.isInitialized=!0,this.deck}},{key:"validateDeckInitialized",value:function(){if(!this.isInitialized||0===this.deck.length)throw new Error("Deck not initialized. Call initializeDeck() with cards first")}},{key:"validateSpreadExists",value:function(t){if(!this.customSpreads.has(t))throw new Error('Spread "'.concat(t,'" not found. Add it using addSpread() first'))}},{key:"addSpread",value:function(t,r){var e=r.positions,n=r.description,i=void 0===n?null:n;if("string"!=typeof t||0===t.trim().length)throw new Error("Spread name must be a non-empty string");if(!Array.isArray(e)||0===e.length)throw new Error("Positions must be a non-empty array of position names");e.forEach(function(t,r){if("string"!=typeof t||0===t.trim().length)throw new Error("Position at index ".concat(r," must be a non-empty string"))});var a={positions:e,description:i,cardCount:e.length};return this.customSpreads.set(t,a),a}},{key:"removeSpread",value:function(t){this.validateSpreadExists(t),this.customSpreads.delete(t)}},{key:"getSpreadInfo",value:function(t){return this.validateSpreadExists(t),this.customSpreads.get(t)}},{key:"listSpreads",value:function(){return Array.from(this.customSpreads.keys())}},{key:"drawCards",value:function(t){if(this.validateDeckInitialized(),t>this.deck.length)throw new Error("Cannot draw ".concat(t," cards. Only ").concat(this.deck.length," cards available"));for(var r=e(this.deck),n=r.length-1;n>0;n--){var i=Math.floor(Math.random()*(n+1)),a=[r[i],r[n]];r[n]=a[0],r[i]=a[1]}return r.slice(0,t)}},{key:"doReading",value:function(t){this.validateDeckInitialized(),this.validateSpreadExists(t);var r=this.customSpreads.get(t),e=this.drawCards(r.cardCount);return this.currentSpread=r.positions.map(function(t,r){return{position:t,card:e[r]}}),this.currentSpread}},{key:"getCurrentSpread",value:function(){return this.currentSpread}},{key:"shuffleDeck",value:function(){this.validateDeckInitialized();for(var t=this.deck.length-1;t>0;t--){var r=Math.floor(Math.random()*(t+1)),e=[this.deck[r],this.deck[t]];this.deck[t]=e[0],this.deck[r]=e[1]}}},{key:"getDeckInfo",value:function(){return this.validateDeckInitialized(),{cardCount:this.deck.length,cards:this.deck.map(function(t){return t})}}}])&&a(t.prototype,r),n&&a(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,r,n}();const c=r.t;export{c as Tarot};